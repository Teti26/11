import streamlit as st
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn

import json
import re
import io

def interpret_beck(score):
    if score == "" or score is None:
        return ""
    score = int(score)
    if score <= 9:
        return "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    elif score <= 19:
        return "–ª—ë–≥–∫–æ–µ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    elif score <= 22:
        return "—É–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    else:
        return "–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

def interpret_hads_anxiety(score):
    if score == "" or score is None:
        return ""
    score = int(score)
    if score <= 7:
        return "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏"
    elif score <= 10:
        return "—Å—É–±–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞"
    else:
        return "–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞"

def interpret_hads_depression(score):
    if score == "" or score is None:
        return ""
    score = int(score)
    if score <= 7:
        return "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–µ–ø—Ä–µ—Å—Å–∏–∏"
    elif score <= 10:
        return "—Å—É–±–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    else:
        return "–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

def interpret_spielberger_state(score):
    if score == "" or score is None:
        return ""
    score = int(score)
    if score <= 30:
        return "–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (–Ω–æ—Ä–º–∞)"
    elif score <= 45:
        return "—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
    else:
        return "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"

def interpret_spielberger_trait(score):
    if score == "" or score is None:
        return ""
    score = int(score)
    if score <= 30:
        return "–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (–Ω–æ—Ä–º–∞)"
    elif score <= 45:
        return "—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
    else:
        return "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"

def interpret_prikhojan(score):
    if score == "" or score is None:
        return ""
    score = int(score)
    if score <= 2:
        return "—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –≤—ã—Ä–∞–∂–µ–Ω–∞ –∏–ª–∏ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∑–∞—â–∏—Ç–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"
    elif score <= 6:
        return "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
    elif score <= 8:
        return "–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≤—ã—à–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å"
    elif score == 9:
        return "—è–≤–Ω–æ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å"
    else:
        return "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å (–≥—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞)"

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏–π", layout="centered")

TEMPLATE_MAP = {
    "üß† –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ": {
        "template": "–®–∞–±–ª–æ–Ω_—Å_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏.docx",
        "json": "structured_choice_options_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è_–æ–±–Ω–æ–≤–ª—ë–Ω.json",
        "sections": "structured_sections_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è_–æ–±–Ω–æ–≤–ª—ë–Ω.json"
    }
}

st.title("üßæ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏–π")
selected_type = st.radio("### –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–ª—é—á–µ–Ω–∏—è:", list(TEMPLATE_MAP.keys()))

TEMPLATE_PATH = TEMPLATE_MAP[selected_type]["template"]
CHOICES_PATH = TEMPLATE_MAP[selected_type]["json"]
SECTIONS_PATH = TEMPLATE_MAP[selected_type].get("sections")

@st.cache_data
def load_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

@st.cache_resource
def load_template(path):
    return Document(path)

choices = load_json(CHOICES_PATH)
doc_template = load_template(TEMPLATE_PATH)
sections = load_json(SECTIONS_PATH) if SECTIONS_PATH else None

def extract_ordered_markers(doc):
    markers = []
    seen = set()
    for para in doc.paragraphs:
        found = re.findall(r"\{\{(.+?)\}\}", para.text)
        for marker in found:
            if marker not in seen:
                seen.add(marker)
                markers.append(marker)
    return markers

user_values = {}

def render_field(marker):
    quantitative_markers = {
        "—à–∫–∞–ª–∞_–±–µ–∫–∞": interpret_beck,
        "hads_—Ç—Ä–µ–≤–æ–≥–∞": interpret_hads_anxiety,
        "hads_–¥–µ–ø—Ä–µ—Å—Å–∏—è": interpret_hads_depression,
        "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_—Å–∏—Ç—É–∞—Ç–∏–≤–Ω–∞—è": interpret_spielberger_state,
        "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è": interpret_spielberger_trait,
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–æ–±—â–∞—è": interpret_prikhojan,
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—à–∫–æ–ª—å–Ω–∞—è": interpret_prikhojan,
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–Ω–∞—è": interpret_prikhojan,
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è": interpret_prikhojan,
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–∞–≥–∏—á–µ—Å–∫–∞—è": interpret_prikhojan,
    }

    if marker in quantitative_markers:
        label = choices.get(marker, {}).get("label", marker)
        raw = st.text_input(label, key=marker)
        if raw and raw.isdigit() and int(raw) > 0:
            score = int(raw)
            user_values[marker] = score
            interp = quantitative_markers[marker](score)
            user_values[marker + "_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"] = interp
            st.info(interp)
        else:
            user_values[marker] = ""
            user_values[marker + "_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"] = ""
        return

    field = choices.get(marker)
    label = field.get("label", marker.replace("_", " ").capitalize()) if field else marker
    help_text = field.get("help", "") if field else ""

    if not field:
        user_values[marker] = st.text_input(label, key=marker)
        return

    if marker in ("–æ—Ç–º–µ—á–∞–µ—Ç—Å—è", "–æ—Ç–º–µ—á–∞–µ—Ç—Å—è_—Å–µ–º—å—è", "–∫–ª–∞—Å—Å", "–≤–∞—Ä–∏–∞–Ω—Ç_–ø—Ä–æ–≥—Ä–∞–º–º—ã"):
        return
    if marker == "—É—Ç–æ—á–Ω–µ–Ω–∏–µ" and "—É—Ç–æ—á–Ω–µ–Ω–∏–µ" not in user_values:
        user_values["—É—Ç–æ—á–Ω–µ–Ω–∏–µ"] = ""

    field = choices.get(marker)
    label = field.get("label", marker.replace("_", " ").capitalize()) if field else marker
    help_text = field.get("help", "") if field else ""

    if not field:
        user_values[marker] = st.text_input(label, key=marker)
        return

    if field["type"] == "radio":
        selected = st.radio(label, field["options"], help=help_text, key=marker, horizontal=True)
        user_values[marker] = selected

        if marker == "—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏":
            if selected == "–í—ã—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–µ–º–µ–π–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.":
                subfield = choices.get("–æ—Ç–º–µ—á–∞–µ—Ç—Å—è_—Å–µ–º—å—è")
                if subfield:
                    sublabel = subfield.get("label", "–æ—Ç–º–µ—á–∞–µ—Ç—Å—è")
                    subhelp = subfield.get("help", "")
                    selected_items = st.multiselect(sublabel, subfield["options"], help=subhelp, key="–æ—Ç–º–µ—á–∞–µ—Ç—Å—è_—Å–µ–º—å—è_dyn")
                    user_values["–æ—Ç–º–µ—á–∞–µ—Ç—Å—è_—Å–µ–º—å—è"] = ", ".join(selected_items)
            else:
                user_values["–æ—Ç–º–µ—á–∞–µ—Ç—Å—è_—Å–µ–º—å—è"] = ""

        if marker == "–æ–±—É—á–∞–µ—Ç—Å—è_–≤":
            if selected in ("—à–∫–æ–ª–µ", "–∫–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω–æ–π —à–∫–æ–ª–µ"):
                subfield = choices.get("–∫–ª–∞—Å—Å")
                if subfield:
                    sublabel = subfield.get("label", "–ö–ª–∞—Å—Å")
                    subhelp = subfield.get("help", "")
                    selected_class = st.radio(sublabel, subfield["options"], help=subhelp, key="–∫–ª–∞—Å—Å_dyn", horizontal=True)
                    user_values["–∫–ª–∞—Å—Å"] = selected_class
            else:
                user_values["–∫–ª–∞—Å—Å"] = ""

        if marker == "—à–∫–æ–ª—å–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞":
            if selected == "–ø–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ":
                variant = st.text_input("–≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã", key="–≤–∞—Ä–∏–∞–Ω—Ç_–ø—Ä–æ–≥—Ä–∞–º–º—ã_dyn")
                user_values["–≤–∞—Ä–∏–∞–Ω—Ç_–ø—Ä–æ–≥—Ä–∞–º–º—ã"] = variant
            else:
                user_values["–≤–∞—Ä–∏–∞–Ω—Ç_–ø—Ä–æ–≥—Ä–∞–º–º—ã"] = ""

        if marker == "—Ä–µ—á–µ–≤–æ–π_–∫–æ–Ω—Ç–∞–∫—Ç" and selected == "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–≤—è–∑–∏ —Å":
            —É—Ç–æ—á–Ω–µ–Ω–∏–µ = st.text_input("–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—á–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞", key="—É—Ç–æ—á–Ω–µ–Ω–∏–µ")
            user_values["—É—Ç–æ—á–Ω–µ–Ω–∏–µ"] = —É—Ç–æ—á–Ω–µ–Ω–∏–µ

    elif field["type"] == "multiselect":
        if marker == "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
            st.markdown("### ‚úÖ –í—ã–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            selected_items = []
            for option in field["options"]:
                if st.checkbox(option, key=f"{marker}_{option}"):
                    selected_items.append(option)
            user_values[marker] = "\n".join(selected_items)
        else:
            selected = st.multiselect(label, field["options"], help=help_text, key=marker)
            user_values[marker] = ", ".join(selected)

    elif field["type"] == "text":
        if marker == "–ø–æ_–¥–∞–Ω–Ω—ã–º_–ø—Ä–æ–µ–∫—Ç–∏–≤–Ω—ã—Ö_–º–µ—Ç–æ–¥–∏–∫":
            user_values[marker] = st.text_area(label, help=help_text, key=marker, height=200)
        else:
            user_values[marker] = st.text_input(label, help=help_text, key=marker)

    elif field["type"] == "number":
        min_val = field.get("min", 0)
        max_val = field.get("max", 100)
        score = st.number_input(label, min_val, max_val, help=help_text, key=marker)
        user_values[marker] = score
        func_name = field.get("interpretation_function")
        if func_name:
            func = globals().get(func_name)
            if func:
                interp = func(score)
                user_values[f"{marker}_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"] = interp
                st.info(interp)

def render_preview(doc, values):
    preview = ""
    quant_keys = [
        "—à–∫–∞–ª–∞_–±–µ–∫–∞", "—à–∫–∞–ª–∞_–±–µ–∫–∞_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "hads_—Ç—Ä–µ–≤–æ–≥–∞", "hads_—Ç—Ä–µ–≤–æ–≥–∞_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "hads_–¥–µ–ø—Ä–µ—Å—Å–∏—è", "hads_–¥–µ–ø—Ä–µ—Å—Å–∏—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_—Å–∏—Ç—É–∞—Ç–∏–≤–Ω–∞—è", "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_—Å–∏—Ç—É–∞—Ç–∏–≤–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è", "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–æ–±—â–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–æ–±—â–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—à–∫–æ–ª—å–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—à–∫–æ–ª—å–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–∞–≥–∏—á–µ—Å–∫–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–∞–≥–∏—á–µ—Å–∫–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"
    ]
    for para in doc.paragraphs:
        text = para.text
        skip_para = False
        for key in re.findall(r"\{\{(.+?)\}\}", text):
            if key in quant_keys and (not values.get(key)):
                skip_para = True
        if skip_para:
            continue
        for key in re.findall(r"\{\{(.+?)\}\}", text):
            val = values.get(key, "")
            text = text.replace(f"{{{{{key}}}}}", str(val or ""))
        preview += text.strip() + "\n\n"
    return preview.strip()

def fill_template(doc, values):
    new_doc = Document()
    quant_keys = [
        "—à–∫–∞–ª–∞_–±–µ–∫–∞", "—à–∫–∞–ª–∞_–±–µ–∫–∞_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "hads_—Ç—Ä–µ–≤–æ–≥–∞", "hads_—Ç—Ä–µ–≤–æ–≥–∞_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "hads_–¥–µ–ø—Ä–µ—Å—Å–∏—è", "hads_–¥–µ–ø—Ä–µ—Å—Å–∏—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_—Å–∏—Ç—É–∞—Ç–∏–≤–Ω–∞—è", "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_—Å–∏—Ç—É–∞—Ç–∏–≤–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è", "—Å–ø–∏–ª–±–µ—Ä–≥–µ—Ä_–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–æ–±—â–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–æ–±—â–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—à–∫–æ–ª—å–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—à–∫–æ–ª—å–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_—Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
        "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–∞–≥–∏—á–µ—Å–∫–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞–Ω_–º–∞–≥–∏—á–µ—Å–∫–∞—è_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"
    ]
    for para in doc.paragraphs:
        text = para.text
        markers = re.findall(r"\{\{(.+?)\}\}", text)
        if any(m in quant_keys for m in markers):
            if all(not str(values.get(m, "")) for m in markers if m in quant_keys):
                continue

        extra_recommendations = []
        for key in markers:
            val = values.get(key, "")
            if key in quant_keys and not val:
                val = ""
            elif key == "–∫–ª–∞—Å—Å" and val:
                val = f"{val} –∫–ª–∞—Å—Å–µ"
            elif key == "–∫–ª–∞—Å—Å":
                val = ""
            elif key.startswith("–æ—Ç–º–µ—á–∞") and val:
                val = "–û—Ç–º–µ—á–∞—é—Ç—Å—è: " + val + "."
            elif key.startswith("–æ—Ç–º–µ—á–∞"):
                val = ""
            elif key == "—É—Ç–æ—á–Ω–µ–Ω–∏–µ" and val:
                val = f" ({val})"
            elif key == "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" and val:
                val = val.split("\n")
                extra_recommendations = val
                val = ""
            else:
                val = str(val or "")
            text = text.replace(f"{{{{{key}}}}}", val if isinstance(val, str) else str(val))

        p = new_doc.add_paragraph()
        run = p.add_run(text.strip())
        run.font.name = 'Times New Roman'
        run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Times New Roman')
        run.font.size = Pt(12)
        p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

        for item in extra_recommendations:
            if item.strip():
                rec_p = new_doc.add_paragraph()
                rec_run = rec_p.add_run(item.strip())
                rec_run.font.name = 'Times New Roman'
                rec_run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Times New Roman')
                rec_run.font.size = Pt(12)
                rec_p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

    return new_doc

# ====== –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° ======
st.markdown(f"<h2 style='text-align:center'>{selected_type}</h2>", unsafe_allow_html=True)
if sections:
    for section_title, field_list in sections.items():
        with st.expander(section_title, expanded=True):
            for marker in field_list:
                render_field(marker)
else:
    for marker in extract_ordered_markers(doc_template):
        render_field(marker)

if st.button("üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"):
    st.text_area("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", render_preview(doc_template, user_values), height=300)

if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"):
    filled = fill_template(doc_template, user_values)
    buffer = io.BytesIO()
    filled.save(buffer)
    buffer.seek(0)
    st.download_button(
        "üì• –°–∫–∞—á–∞—Ç—å .docx",
        data=buffer,
        file_name=f"{selected_type.split()[1].lower()}_–∑–∞–∫–ª—é—á–µ–Ω–∏–µ.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

# ====== –ñ–ò–†–ê–§ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï –°–¢–†–ê–ù–ò–¶–´ ======
st.markdown("---")
st.image("giraffe.png", caption="", use_container_width=True)
